; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
src_dir = FluidNC
include_dir = FluidNC/include
; lib_dir = libraries
test_dir = FluidNC/tests
data_dir = FluidNC/data
default_envs = maslow
extra_configs=
    platformio_override.ini
    ;debug.ini

[common_env_data]
lib_deps_builtin = 
	SPI

[common]
build_flags = 
	!python git-version.py
	-DCORE_DEBUG_LEVEL=0
	-Wno-unused-variable
	-Wno-unused-function
lib_deps =
	TMCStepper@>=0.7.0,<1.0.0
	thingpulse/ESP8266 and ESP32 OLED driver for SSD1306 displays@4.4.1
bt_deps =
	BluetoothSerial
wifi_deps =
	arduinoWebSockets=https://github.com/MitchBradley/arduinoWebSockets#canSend
	WiFi=https://github.com/MitchBradley/WiFi#canWrite
        ; If we include the following explicit dependencies when we get the
        ; Arduino framework code from github, platformio picks up different
        ; and incompatible versions of these libraries from who knows where, 
	; ArduinoOTA
	; DNSServer
	; ESPmDNS
	; Update
	; WebServer
	; WiFi
	; WiFiClientSecure

[common_esp32_base]
platform = https://github.com/platformio/platform-espressif32.git
framework = arduino
platform_packages =
    platformio/framework-arduinoespressif32@^3.20016.0
    tool-esptoolpy@https://github.com/Jason2866/esptool/releases/download/v4.8.6/esptool.zip
board_build.arduino.upstream_packages = no

upload_speed = 921600
board_build.partitions = FluidNC/ld/esp32/app2M_spiffs4M_8MB.csv ; For 8MB ESP32: 2MB for app, 4MB for SPIFFS
board_build.filesystem = littlefs
; board_build.partitions = FluidNC/ld/esp32/app3M_spiffs1M_8MB.csv  ; For 8Meg ESP32
; board_build.partitions = FluidNC/ld/esp32/app3M_spiffs9M_16MB.csv ; For 16Meg ESP32
monitor_speed = 115200
monitor_flags = 
	--eol=LF
monitor_filters=esp32_exception_decoder
board_build.f_flash = 80000000L
build_unflags = -std=gnu++11
build_flags = ${common.build_flags} -std=gnu++17 -D_GLIBCXX_HAVE_DIRENT_H -D__FLUIDNC
; -lstdc++fs
build_src_filter =
	+<*.h> +<*.s> +<*.S> +<*.cpp> +<*.c> +<src/>
        +<esp32>
        +<stdfs>
        -<src/WebUI>
        -<src/BTConfig.cpp>
        ; -<src/OLED.cpp>

lib_extra_dirs = 
	libraries

[common_esp32]
; See FluidNC/ld/esp32/README.md
extra_scripts =	FluidNC/ld/esp32/vtable_in_dram.py

extends = common_esp32_base
board = esp32dev

[common_esp32_s3]
extends = common_esp32_base
board = esp32-s3-devkitc-1
lib_deps = ${common.lib_deps}
; Skip I2S specific sources because Maslow4 doesn't use I2S and FluidNC hasn't implemented support for ESP32S3 I2S yet
build_src_filter = 
	${common_esp32_base.build_src_filter}
	-<esp32/i2s_engine.c>
	-<src/Machine/I2SOBus.cpp>
	-<src/Pins/I2SOPinDetail.cpp>

; The following line fixes a complex ESP32 flash access/ISR issue. 
; See FluidNC/ld/esp32/README.md for details.
; The BarbourSmith/FluidNC fork includes a customized version for the ESP32S3.
; Since that fork, the core FluidNC project has changed, potentially reducing the need for this fix,
; e.g. https://github.com/bdring/FluidNC/commit/ad2cc0af57585c3b4f36932dfa94346dbc5d7e8c
; It's unclear if the Maslow codebase requires this fix. As it hasn't been ported to the ESP32S3 recently, itâ€™s excluded from this build.
; To include the fix, copy the esp32s3 folder from BarbourSmith/FluidNC and uncomment the following line:
; extra_scripts = FluidNC/ld/esp32s3/vtable_in_dram.py

[common_wifi]
build_src_filter = +<src/WebUI/*.cpp>

[env:maslow]
extends = common_esp32_s3
lib_deps = ${common.lib_deps} ${common.wifi_deps}
build_src_filter = ${common_esp32_s3.build_src_filter} ${common_wifi.build_src_filter}
build_flags = 
	${common_esp32_s3.build_flags}
	-DARDUINO_USB_MODE=1 ; Enable native USB mode (do not use UART-to-USB bridge)
	-DARDUINO_USB_CDC_ON_BOOT=1 ; Enables USB CDC on boot, making the ESP32-S3 act as a USB serial device
